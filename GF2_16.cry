///////////////////////////////////////////
// Field parameters

type GF2 n = [n]

type FieldWidth = 16
type FieldSize  = 2^^FieldWidth
type Q = FieldSize - 1

// The particular irreducible polynomial we use
// generate GF2(16)
irr = <| x^^16 + x^^12 + x^^3 + x + 1 |>

//////////////////////////////////////////
// Construction of exp and log tables

nextPow : GF2(16) -> GF2(16)
nextPow b = tail ((b # zero) ^ red)
  where red = if b@0 then irr else zero

exptable : [2*FieldSize](GF2(16))
exptable = take tab
  where tab = [1] # [ nextPow b | b <- tab ]

logtable : [FieldSize][FieldWidth]
logtable = updates zero (take exptable) [ 0 .. Q ]

property logexp_correct (x:GF2(16)) =
  x != 0 ==>
    exptable@(logtable@x) == x

property logexp_correct2 (x:GF2(16)) =
  x != 0 ==>
    exptable@((zero # logtable@x) + `Q:[17]) == x

//////////////////////////////////////////
// The zero masking operation, which gives
// us a branch-free way to handle the zero
// cases for multiplicationl and division

zeroMask : {n} (fin n, n >= 1) => [n] -> [n]
zeroMask x = take`{n}( ((zero:[n]) # x) - 1 )

property zeroMask_correct (x:[16]) =
  zeroMask x == (if x == 0 then 0xFFFF else 0x0000)

//////////////////////////////////////////
// Addition, multiplication, division
// and inverse operations in the field

gf16_add : GF2(16) -> GF2(16) -> GF2(16)
gf16_add x y = x ^ y

gf16_mult : GF2(16) -> GF2(16) -> GF2(16)
gf16_mult x y = (z && c) ^ c
  where
   a, b : [17]
   a = [False] # logtable@x
   b = [False] # logtable@y
   c = exptable@(a + b)
   z = zeroMask x || zeroMask y

// PRECONDITION: x != 0
gf16_inv : GF2(16) -> GF2(16)
gf16_inv x = exptable@(`Q - logtable@x)

// PRECONDITION: y != 0
gf16_div : GF2(16) -> GF2(16) -> GF2(16)
gf16_div x y = (z && c) ^ c
 where
   a, b : [17]
   a = [False] # logtable@x
   b = [False] # logtable@y
   c = exptable@(a + (`Q - b))
   z = zeroMask x

/////////////////////////////////////////
// Specifications of the operations

property mult_correct (x, y : GF2(16) ) =
  gf16_mult x y == pmod (pmult x y) irr

property inv_correct (x : GF2(16) ) =
  x != 0 ==>
    pmod (pmult x (gf16_inv x)) irr == 1

property div_correct (x, y : GF2(16) ) =
  y != 0 ==>
    pmod (pmult y (gf16_div x y)) irr == x

/////////////////////////////////////////
// Field axioms

property add_unit (x : GF2(16) ) =
  gf16_add x 0 == x

property add_inv (x : GF2(16) ) =
  gf16_add x x == 0

property add_assoc (x, y, z : GF2(16) ) =
  gf16_add (gf16_add x y) z == gf16_add x (gf16_add y z)

property add_comm (x, y : GF2(16) ) =
  gf16_add x y == gf16_add y x

property mult_unit (x : GF2(16) ) =
  gf16_mult x 1 == x

property mult_inv (x : GF2(16) ) =
  x != 0 ==>
    gf16_mult x (gf16_inv x) == 1

property mult_assoc (x, y, z : GF2(16) ) =
  gf16_mult (gf16_mult x y) z == gf16_mult x (gf16_mult y z)

property mult_comm (x, y : GF2(16) ) =
  gf16_mult x y == gf16_mult y x

property mult_distrib (x, y, z : GF2(16) ) =
  gf16_mult x (gf16_add y z) == gf16_add (gf16_mult x y) (gf16_mult x z)

//////////////////////////////////////////
// Raising to arbitrary powers

// PRECONDITION a != 0
// compute a^^x in GF2(16)
gf16_pow : GF2(16) -> [FieldWidth] -> GF2(16)
gf16_pow a x = exptable@m_modQ
  where
   m : [2*FieldWidth]
   m = (zero # logtable@a) * (zero # x)

   // The magic of modular arithmetic!
   m_modQ = (m >> 16) + (m && 0x0000FFFF)

gf16_pow_naive : GF2(16) -> [FieldWidth] -> GF2(16)
gf16_pow_naive a x = powers@x
  where powers = [1] # [ pmod (pmult a b) irr | b <- powers ]

property pow_correct a x =
  a != 0 ==>
    gf16_pow a x == gf16_pow_naive a x
